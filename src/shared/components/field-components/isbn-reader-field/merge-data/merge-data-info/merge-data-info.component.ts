import { CommonModule } from '@angular/common';
import { Component, Input, OnInit, inject } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { MatRadioChange, MatRadioModule } from '@angular/material/radio';
import { MatTableModule } from '@angular/material/table';
import { Book } from 'src/shared/models';
import { TranslationService } from 'src/shared/services';

@Component({
    selector: 'app-merge-data-info',
    imports: [
        FormsModule,
        CommonModule,
        MatTableModule,
        MatRadioModule,
    ],
    templateUrl: './merge-data-info.component.html',
    styleUrl: './merge-data-info.component.scss'
})
export class MergeDataInfoComponent implements OnInit {
  @Input()
  externalBooksArray: Book[] | null = []

  translationService = inject(TranslationService)

  columns: any[] = [];
  displayedColumns: string[] = [];
  dataSource: Book[] | [] = [];
  pickedData!: number

  generateColumns() {
    if (this.externalBooksArray) {
      const uniqueKeys = new Set(this.externalBooksArray.reduce((acc, book) => {
        Object.keys(book).forEach(key => acc.add(key));
        return acc;
      }, new Set()));

      const controlColumn = [
        {
          columnDef: 'choosen',
          header: "",
          // header:  this.translationService.getTranslations("common.choose"),
        }
      ]

      // todo key type to fix
      const autoGeneratedColumns = Array.from(uniqueKeys).map((key: any) => {
        const translatedKey = this.translationService.getTranslations(`book.${key}`);
        return {
          columnDef: key,
          header: translatedKey.charAt(0).toUpperCase() + translatedKey.slice(1), // Simple capitalization for header
          cell: (element: Book) => typeof element[(key as keyof Book)] !== "undefined" ? element[(key as keyof Book)] : "",
        }
      });

      return [...controlColumn, ...autoGeneratedColumns]
    }
    return []
  }

  isSticky(item: string){
    return item === "choosen" || item === "title"
  }

  ngOnInit(): void {
    if(this.externalBooksArray){
      this.dataSource = this.externalBooksArray
    }
    this.columns = this.generateColumns()
    this.displayedColumns = this.columns.map(c => c.columnDef);
  }
}
